{
  "_from": "blinktrade",
  "_id": "blinktrade@0.0.14",
  "_inBundle": false,
  "_integrity": "sha512-cJ6A2JQpIqITEL8E2ZpfLaaioyzn0KoYUcJWCATCrwGnlqYV+niylCLEJBKnYAF4r3GUE0YBqN9mO9STYEJRMQ==",
  "_location": "/blinktrade",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "blinktrade",
    "fetchSpec": "latest",
    "name": "blinktrade",
    "raw": "blinktrade",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/blinktrade/-/blinktrade-0.0.14.tgz",
  "_shasum": "124e1bc7a8a3128368714140b5c58eaee20fb116",
  "_spec": "blinktrade",
  "_where": "/home/pedrohsa/Documentos/Pedro-Henrique/bitcoin-proj/v2.0/BraxcoinApp",
  "author": {
    "name": "Cesar Augusto, Rodrigo Souza"
  },
  "bundleDependencies": false,
  "dependencies": {
    "eventemitter2": "^2.1.0",
    "fetch-jsonp": "^1.0.1",
    "fingerprintjs2": "^1.4.1",
    "flow-bin": "^0.59.0",
    "ip": "^1.1.3",
    "isomorphic-fetch": "^2.2.1",
    "lodash": "^4.15.0",
    "macaddress": "^0.2.8",
    "nodeify": "^1.0.0",
    "sjcl": "^1.0.3",
    "ws": "^3.3.1"
  },
  "deprecated": false,
  "description": "BlinkTrade Client for node.js",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-eslint": "^8.0.2",
    "babel-loader": "^6.2.5",
    "babel-plugin-lodash": "^3.2.11",
    "babel-plugin-transform-flow-strip-types": "^6.14.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-stage-0": "^6.5.0",
    "chai": "^3.5.0",
    "cross-env": "^3.1.3",
    "eslint": "^4.11.0",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-plugin-flowtype": "^2.39.1",
    "eslint-plugin-import": "^2.8.0",
    "json-loader": "^0.5.4",
    "mocha": "^4.0.1",
    "moment": "^2.14.1",
    "rimraf": "^2.5.4",
    "sinon": "^1.17.6",
    "webpack": "^1.13.2",
    "webpack-node-externals": "^1.3.3"
  },
  "directories": {
    "test": "test"
  },
  "keywords": [
    "blinktrade",
    "node"
  ],
  "license": "GPLv3",
  "main": "lib/index.js",
  "name": "blinktrade",
  "optionalDependencies": {},
  "readme": "# BlinkTradeJS SDK\n\n[![travis](https://travis-ci.org/blinktrade/BlinkTradeJS.svg?branch=master)](https://travis-ci.org/blinktrade/BlinkTradeJS)\n[![npm version](https://badge.fury.io/js/blinktrade.svg)](https://badge.fury.io/js/blinktrade)\n[![Dependency Status](https://gemnasium.com/badges/github.com/blinktrade/BlinkTradeJS.svg)](https://gemnasium.com/github.com/blinktrade/BlinkTradeJS)\n[![Known Vulnerabilities](https://snyk.io/test/github/blinktrade/blinktradejs/badge.svg)](https://snyk.io/test/github/blinktrade/blinktradejs)\n\nBlinkTradeJS WebSocket and REST Official JavasScript client for node.js and browser.\n\n# Getting Started\n\nBlinkTrade provides a simple and robust WebSocket API to integrate our platform, we strongly recommend you to use it over the RESTful API.\n\n## Install\n\n`$ yarn add blinktrade`\n\nusing npm.\n\n`$ npm install blinktrade`\n\n# Documentation\n\nYou can also check our [Full API Documentation](https://blinktrade.com/docs).\n\n# Examples\n\nMore examples can be found in the [examples directory.](./examples)\n\n# Usage\n\nAll SDK supports either promises and callbacks, if a callback is provided as the last argument, it will be called as `callback(error, result)`,\notherwise it will just return the original promise, we also provide event emitters that you can use to get realtime updates through our WebSocket API,\nyou can check the [Event Emitters section.](#event-emitters)\n\n\n## Public REST API\n\nThe most simple way to get the ticker, orderbook and trades, is through our public RESTful API, which doesn't require authentication.\n\n### Ticker\n\n```js\n\nvar BlinkTradeRest = require(\"blinktrade\").BlinkTradeRest;\nvar blinktrade = new BlinkTradeRest({ currency: \"BRL\" });\n\nblinktrade.ticker().then(function(ticker) {\n  console.log(ticker);\n});\n\n```\n\n> Response\n\n```json\n\n  {\n    \"high\": 1900,\n    \"vol\": 4.87859418,\n    \"buy\": 1891.89,\n    \"last\": 1891.89,\n    \"low\": 1891.89,\n    \"pair\": \"BTCBRL\",\n    \"sell\": 1910,\n    \"vol_brl\": 9250.19572651\n  }\n\n```\n\n### OrderBook\n\n\n```js\n\nvar BlinkTradeRest = require(\"blinktrade\").BlinkTradeRest;\nvar blinktrade = new BlinkTradeRest({ currency: \"BRL\" });\n\nblinktrade.orderbook().then(function(orderbook) {\n  console.log(orderbook);\n});\n\n```\n\n> Response\n\n```json\n\n{\n  \"pair\": \"BTCBRL\",\n  \"bids\": [\n    [ 1891.89, 0.16314699, 90800027 ],\n    [ 1880, 0.20712, 90800027 ]\n  ],\n  \"asks\": [\n    [ 1910, 3.28046533, 90800027 ],\n    [ 1919.99, 1.95046354, 90800027 ]\n  ]\n}\n\n```\n\n### Last Trades\n\n```js\n\nvar BlinkTradeRest = require(\"blinktrade\").BlinkTradeRest;\nvar blinktrade = new BlinkTradeRest({ currency: \"BRL\" });\n\nblinktrade.trades().then(function(trades) {\n  console.log(trades);\n});\n\n```\n\n> Response\n\n```json\n\n [{\n    \"tid\": 16093,\n    \"date\": 1472278473,\n    \"price\": 1891.89,\n    \"amount\": 0.1,\n    \"side\": \"sell\"\n  }, {\n    \"tid\": 16094,\n    \"date\": 1472278477,\n    \"price\": 1891.89,\n    \"amount\": 0.1,\n    \"side\": \"sell\"\n  }, {\n    \"tid\": 16095,\n    \"date\": 1472278668,\n    \"price\": 1891.89,\n    \"amount\": 0.1,\n    \"side\": \"sell\"\n }]\n\n```\n\n## Trade REST / WebSocket\n\nOn our RESTful API, we provide a trade endpoint that you're allowed to send and cancel orders,\nrequest deposits and withdrawals. You need to [create an API Key](https://blinktrade.com/docs#create-api-key) through our platform and set their respective permission that gives you access to it.\n\nThe Trade endpoint is internaly a bridge to our `WebSocket` API, so you can access it both on `REST` and `WebSocket` API.\nBe aware that our RESTful trade endpoint can be changed at any time, we strongly recommend using the `WebSocket` API over the `RESTful` API.\n\n> **NOTE** that when generate the API Key and the API Secret, it will be only shown once, you should save it securely. The API Password is only used in the WebSocket API.\n\n```js\nvar BlinkTradeRest = require(\"blinktrade\").BlinkTradeRest;\nvar blinktrade = new BlinkTradeRest({\n  prod: false,\n  key: \"YOUR_API_KEY_GENERATED_IN_API_MODULE\",\n  secret: \"YOUR_SECRET_KEY_GENERATED_IN_API_MODULE\",\n  currency: \"BRL\",\n});\n\nblinktrade.sendOrder({\n  side: \"1\",\n  price: parseInt(1800 * 1e8).toFixed(0),\n  amount: parseInt(0.5 * 1e8).toFixed(0),\n  symbol: \"BTCBRL\",\n}).then(function(order) {\n    console.log(order);\n});\n\n```\n\n> Response\n\n```json\n\n{\n    \"OrderID\": 1459028830811,\n    \"ExecID\": 740972,\n    \"ExecType\": \"0\",\n    \"OrdStatus\": \"0\",\n    \"CumQty\": 0,\n    \"Symbol\": \"BTCUSD\",\n    \"OrderQty\": 5000000,\n    \"LastShares\": 0,\n    \"LastPx\": 0,\n    \"Price\": 180000000000,\n    \"TimeInForce\": \"1\",\n    \"LeavesQty\": 50000000,\n    \"MsgType\": \"8\",\n    \"ExecSide\": \"1\",\n    \"OrdType\": \"2\",\n    \"CxlQty\": 0,\n    \"Side\": \"1\",\n    \"ClOrdID\": 3251968,\n    \"AvgPx\": 0\n}\n\n```\n\n\n## Usage WebSocket\n\n\n### Authenticating\n\nMake sure that you're connected to send messages through WebSocket, most of the message also require that you're authenticated.\n\n```js\n\nvar BlinkTradeWS = require(\"blinktrade\").BlinkTradeWS;\nvar blinktrade = new BlinkTradeWS({ prod: true });\n\nblinktrade.connect().then(function() {\n  // Connected\n  return blinktrade.login({ username: \"\", password: \"\" });\n}).then(function() {\n});\n\n```\n\n### Requesting Balance\n\nWill request your balance for each broker.\n\n```js\n\nblinktrade.balance().then(function(balance) {\n  console.log(balance);\n});\n\n```\n\nYou can pass a callback to receive balance updates.\n\n```js\n\nblinktrade.balance(function(err, balance) {\n  console.log(balance);\n});\n\n```\n\n#### EXAMPLE RESPONSE\n\n```json\n\n{\n    \"5\": {\n        \"BTC_locked\": 0,\n        \"USD\": 177911657052760,\n        \"BTC\": 1468038442214,\n        \"USD_locked\": 96750050000\n    },\n    \"MsgType\": \"U3\",\n    \"ClientID\": 90800003,\n    \"BalanceReqID\": 5019624,\n    \"Available\": {\n        \"USD\": 177814907002760,\n        \"BTC\": 1468038442214\n    }\n}\n\n```\n\n### Subscribe to OrderBook\n\n```js\n\nblinktrade.subscribeOrderbook([\"BTCUSD\"]).then(function(orderbook) {\n  console.log(orderbook);\n});\n\n```\n\n#### EXAMPLE RESPONSE\n\n```json\n\n{\n  \"MDReqID\": 9894272,\n  \"Symbol\": \"BTCUSD\",\n  \"MsgType\": \"W\",\n  \"MarketDepth\": 0,\n  \"MDFullGrp\": {\n    \"BTCUSD\": {\n      \"bids\": [[ 578, 1.59231429, 90800535 ], [ 577.79, 5.68, 90800535 ]],\n      \"asks\": [[ 578.72, 8.32039144, 90800535 ], [ 579.67, 2, 90800535 ]]\n    }\n  }\n}\n\n```\n\nTo unsubscribe from orderbook, you should pass the `MDReqID` on `unSubscribeOrderbook()`.\n\n```js\n\nblinktrade.subscribeOrderbook([\"BTCUSD\"]).then(function(orderbook) {\n  blinktrade.unSubscribeOrderbook(orderbook.MDReqID);\n});\n\n```\n\n> Note that there's no return when unsubscribe from orderbook.\n\n\n### Subscribe to ticker\n\nYou can subscribe on one or more market symbols.\n\n```js\n\nblinktrade.subscribeTicker([\"BLINK:BTCUSD\"]).then(function(ticker) {\n  console.log(ticker);\n});\n\n```\n\nTo unsubscribe from ticker, you do the same as `unSubscribeOrderbook`, but passing `SecurityStatusReqID` to `unSubscribeTicker()`.\n\n```js\n\nblinktrade.subscribeTicker([\"BLINK:BTCUSD\"]).then(function(ticker) {\n  blinktrade.unSubscribeTicker(ticker.SecurityStatusReqID);\n});\n\n```\n\n### Send and cancelling orders\n\n\n##### [Floats are Evil!](http://floating-point-gui.de/basic/)\n\nConverting Floats to Integers can be dangerous. Different programming languages can get weird rounding errors and imprecisions,\nso all API returns prices and bitcoin values as Integers and in \"satoshis\" format. We also expect Integers as input,\nmake sure that you're formatting the values properly to avoid precision issues.\n\ne.g.:\n\n```\n// Wrong\n0.57 * 1e8 => 56999999.99999999\n\n// Correct\nparseInt((0.57 * 1e8).toFixed(0)) => 57000000\n\n```\n\n```js\n\nblinktrade.sendOrder({\n  \"side\": \"1\", // Buy\n  \"price\": parseInt((550 * 1e8).toFixed(0)),\n  \"amount\": parseInt((0.05 * 1e8).toFixed(0)),\n  \"symbol\": \"BTCUSD\",\n}).then(function(order) {\n  // Sent\n});\n\n```\n\n> Response\n\nThe response is the same as the [Execution Report](#executionreport-websocket), if you're using it with rest transport, it will response as an array together with the balance response.\n\n```json\n\n{\n    \"OrderID\": 1459028830811,\n    \"ExecID\": 740972,\n    \"ExecType\": \"0\",\n    \"OrdStatus\": \"0\",\n    \"CumQty\": 0,\n    \"Symbol\": \"BTCUSD\",\n    \"OrderQty\": 5000000,\n    \"LastShares\": 0,\n    \"LastPx\": 0,\n    \"Price\": 55000000000,\n    \"TimeInForce\": \"1\",\n    \"LeavesQty\": 5000000,\n    \"MsgType\": \"8\",\n    \"ExecSide\": \"1\",\n    \"OrdType\": \"2\",\n    \"CxlQty\": 0,\n    \"Side\": \"1\",\n    \"ClOrdID\": 3251968,\n    \"AvgPx\": 0\n}\n\n```\n\nTo cancel a order, you need to pass the `orderId`, you'll also need to pass the `clientId` in order to get a response,\nif you didn't provide `orderId`, all open orders will be cancelled.\n\n\n```js\n\nblinktrade.cancelOrder({ orderId: order.OrderID, clientId: order.ClOrdID }).then(function(order) {\n  console.log(\"Order Cancelled\");\n});\n\n```\n\n> The response will be the same as the sendOrder with `ExecType: \"4\"`\n\n\n\n### Last Trades\n\nList the latest trades executed on an exchange since a chosen date.\n\n```js\n\nblinktrade.trades({ limit: 1000, since: \"1472347212\" }).then(function(data) {\n  console.log(\"Trades\", data);\n});\n\n```\n\n### Requesting Deposits\n\nYou can generate either bitcoin or FIAT deposits, if any arguments was passed, it will generate a bitcoin deposit along with the address.\n\n#### Generate bitcoin address to deposit\n\n```js\n\nblinktrade.requestDeposit().then(function(deposit) {\n  console.log(deposit);\n});\n\n```\n\n#### Fiat deposit\n\nTo generate a FIAT deposit, you need to pass the `depositMethodId` which correspond the method of deposit of your broker, you can get these informations calling [`requestDepositMethods()`](requestDepositMethods)\n\n```js\n\nblinktrade.requestDeposit({\n  value: parseInt(200 * 1e8),\n  currency: \"BRL\",\n  depositMethodId: 502,\n}).then(function(deposit) {\n  console.log(deposit);\n});\n\n```\n\n> Response\n\nBoth responses for bitcoin and fiat deposits are quite similar.\n\n```json\n\n{\n    \"DepositMethodName\": \"deposit_btc\",\n    \"UserID\": 90800003,\n    \"ControlNumber\": null,\n    \"State\": \"UNCONFIRMED\",\n    \"Type\": \"CRY\",\n    \"PercentFee\": 0,\n    \"Username\": \"user\",\n    \"CreditProvided\": 0,\n    \"DepositReqID\": 7302188,\n    \"DepositID\": \"2a6b5e322fd24574a4d9f988681a542f\",\n    \"Reason\": null,\n    \"AccountID\": 90800003,\n    \"Data\": {\n        \"InputAddress\": \"mjjVMr8WcYQwVGzYc8HpaRyAZc89ngTdKV\",\n        \"Destination\": \"n19ZAH1WGoUkQhubQw71fH11BenifxpBxf\"\n    },\n    \"ClOrdID\": \"7302188\",\n    \"Status\": \"0\",\n    \"Created\": \"2016-09-03 23:08:26\",\n    \"DepositMethodID\": null,\n    \"Value\": 0,\n    \"BrokerID\": 5,\n    \"PaidValue\": 0,\n    \"Currency\": \"BTC\",\n    \"ReasonID\": null,\n    \"MsgType\": \"U23\",\n    \"FixedFee\": 0\n}\n\n```\n\n**NOTE** The `Data.InputAddress` is the address that you have to deposit. **DO NOT DEPOSIT** on `Data.Destination` address.\n\n### Requesting Withdraws\n\nTo request withdraws, you need to pass a \"data\" information, which represents the information to your withdraw,\nit's related to bank accounts, numbers, or a bitcoin address. This information is dynamically and different for every broker.\n\n```js\n\nblinktrade.requestWithdraw({\n  \"amount\": parseInt(400 * 1e8),\n  \"currency\": \"BRL\",\n  \"method\": \"bradesco\",\n  \"data\": {\n    \"AccountBranch\": \"111\",\n    \"AccountNumber\": \"4444-5\",\n    \"AccountType\": \"corrente\",\n    \"CPF_CNPJ\": \"00000000000\"\n  }\n})\n\n```\n\n### Confirm Withdraws (two-factor)\n\nAfter requesting a withdraw, you might get an error asking for two factor authentication,\nyou should call `confirmWithdraw` passing the `confirmationToken` that was sent to your email,\nor `secondFactor` if needed.\n\n```js\n\nblinktrade.confirmWithdraw({\n    withdrawId: 523,\n    confirmationToken: 'TOKEN'\n});\n\n```\n\n> Response\n\n```json\n\n{\n    \"Username\": \"user\",\n    \"Status\": \"1\",\n    \"SecondFactorType\": \"\",\n    \"Created\": \"2016-09-03 23:42:06\",\n    \"PaidAmount\": 50000000,\n    \"UserID\": 90800003,\n    \"Reason\": null,\n    \"Currency\": \"BRL\",\n    \"Amount\": 50000000,\n    \"ReasonID\": null,\n    \"BrokerID\": 5,\n    \"ClOrdID\": \"3332623\",\n    \"WithdrawID\": 523,\n    \"WithdrawReqID\": 3332623,\n    \"MsgType\": \"U7\",\n    \"Data\": {\n        \"Instant\": \"NO\",\n        \"AccountBranch\": \"111\",\n        \"AccountNumber\": \"4444-5\",\n        \"AccountType\": \"corrente\", \n        \"CPF_CNPJ\": \"00000000000\"\n    },\n    \"Method\": \"bradesco\",\n    \"FixedFee\": 0,\n    \"PercentFee\": 0\n}\n\n\n```\n\n## Event Emitters\n\nUsing event emitters is easy and expressive way to keep you updated through our `WebSocket` API,\nyou can listen to individual events to match your needs, you can listen to new orders, execution reports, tickers and balance changes.\nEvent emitters can also be used as promises to keep it chained, event emitters are implemented with [`EventEmitter2`](https://github.com/asyncly/EventEmitter2),\nwhich gives you more flexibility to match events with multi-level wildcards and extends events such as `.onAny`, `.once`, `.many` and so on.\n\n### Event Ticker\n\nTo keep ticker update on new events, you can return a event emitter and match with the market.\n\n```js\n\nblinktrade.subscribeTicker([\"UOL:USDBRT\", \"BLINK:BTCUSD\", \"BLINK:BTCBRL\"])\n  .on(\"UOL:USDBRT\",   function(usdbrt) {\n}).on(\"BLINK:BTCUSD\", function(btcusd) {\n}).on(\"BLINK:BTCBRL\", function(btcbrl) {\n});\n\n```\n\nYou can easily match all symbols at the same listener.\n\n```js\n\nblinktrade.subscribeTicker([\"UOL:USDBRT\", \"BLINK:BTCUSD\", \"BLINK:BTCBRL\"])\n.on(\"BLINK:*\", function(symbol) {\n});\n\n```\n\n### Event Market Data\n\nTo get realtime updates on order book, you should listen to the following events.\n\n```js\n\nblinktrade.subscribeOrderbook([\"BTCUSD\"])\n  .on(\"OB:NEW_ORDER\", function(order) {\n}).on(\"OB:UPDATE_ORDER\", function(order) {\n}).on(\"OB:DELETE_ORDER\", function(order) {\n}).on(\"OB:DELETE_ORDERS_THRU\", function(order) {\n}).on(\"OB:TRADE_NEW\", function(order) {\n});\n\n```\n\nYou can still return a promise when listen events.\n\n```js\n\nblinktrade.subscribeOrderbook([\"BTCUSD\"])\n.on(\"OB:NEW_ORDER\", function(order) {\n  console.log(\"New order received\");\n}).then(function(orderbook) {\n  console.log(\"Full orderbook\", orderbook);\n});\n\n```\n\n### Event Balance\n\nYou listen to the `BALANCE` event to receive balance updates.\n\n```js\n\nblinktrade.balance().on(\"BALANCE\", function(balance) {\n  console.log(balance);\n});\n\n```\n\n### Execution Reports\n\nIn order the get when a order is executed, you can listen to the execution report.\n\n```js\n\nblinktrade.executionReport()\n  .on(\"EXECUTION_REPORT:NEW\", function(data) {\n}).on(\"EXECUTION_REPORT:PARTIAL\", function(data) {\n}).on(\"EXECUTION_REPORT:EXECUTION\", function(data) {\n}).on(\"EXECUTION_REPORT:CANCELED\", function(data) {\n}).on(\"EXECUTION_REPORT:REJECTED\", function(data) {\n});\n\n```\n\n### Withdraw and Deposit Refresh\n\nTo get deposit and withdraw updates, you can listen to `DEPOSIT_REFRESH` and `WITHDRAW_REFRESH` respectively.\n\n```js\n\nblinktrade.requestDeposit().on('DEPOSIT_REFRESH', function(deposit) {\n  console.log(deposit);\n});\n\nblinktrade.requestWithdraw().on('WITHDRAW_REFRESH', function(withdraw) {\n  console.log(withdraw);\n});\n\n```\n\n**NOTE** that these events will only be called to the current deposit / withdraw created.\nIf you want to listen to any deposit / withdraw updates, you should use `onDepositRefresh(callback)` and `onWithdrawRefresh()` instead.\n\n```js\n\nblinktrade.onDepositRefresh(function(deposit) {\n  console.log(deposit);\n});\n\nblinktrade.onWithdrawRefresh(function(withdraw) {\n  console.log(withdraw);\n});\n\n```\n\n# API\n\n## Public REST API\n\n* [Ticker](#ticker-rest)\n* [Trades](#trades-rest)\n* [Orderbook](#orderbook-rest)\n\n## WebSocket\n\n* [connect](#connect-websocket)\n* [heartbeat](#heartbeat-websocket)\n* [login](#login-websocket)\n* [logout](#logout-websocket)\n* [profile](#profile-websocket)\n* [subscribeTicker](#ticker-websocket)\n* [unSubscribeTicker](#ticker-websocket)\n* [subscribeOrderbook](#orderbook-websocket)\n* [unSubscribeOrderbook](#orderbook-websocket)\n* [executionReport](#executionreport-websocket)\n* [tradeHistory](#tradehistory-websocket)\n\n## Trade Rest / Websocket\n\n* [balance](#balance-websocket-rest)\n* [sendOrder](#sendorder-websocket-rest)\n* [cancelOrder](#cancelorder-websocket-rest)\n* [myOrders](#myorders-websocket-rest)\n* [requestLedger](#requestledger-websocket-rest)\n* [requestWithdrawList](#requestwithdrawlist-websocket-rest)\n* [requestWithdraw](#requestwithdraw-websocket-rest)\n* [confirmWithdraw](#confirmwithdraw-websocket-rest)\n* [cancelWithdraw](#cancelwithdraw-websocket-rest)\n* [onWithdrawRefresh](#onwithdrawrefresh-websocket)\n* [requestDepositList](#requestdepositList-websocket-rest)\n* [requestDeposit](#requestdeposit-websocket-rest)\n* [requestDepositMethods](#requestdeposit-websocket-rest)\n* [onDepositRefresh](#ondepositrefresh-websocket)\n\n## Public REST\n\n### Constructor [rest]\n\n`new BlinkTradeRest(Object constructor)`\n\n#### Arguments\n\n| Name     | Type    | Description                                                                |\n|----------|---------|----------------------------------------------------------------------------|\n| prod     | Boolean | Production environment, default to false                                   |\n| brokerId | Number  | [see brokers list]()                                                       |\n| key      | String  | API Key generated on our platform, it only needed on the Trade endpoint    |\n| secret   | String  | API Secret generated on our platform, it only needed on the Trade endpoint |\n| currency | String  | Currency symbol to fetch public endpoint                                   |\n\n### ticker [rest]\n\n`ticker(Function? callback)` => Promise / callback\n\n### trades [rest]\n\n`trades(Object params, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name  | Type   | Description                                                                |\n|-------|--------|----------------------------------------------------------------------------|\n| limit | Number | Limit of trades that will be returned. <NUMBER> should be a positive integer. Optional; defaults to 1000 trades  |\n| since | Number | Date which executed trades must be fetched from. <TIMESTAMP> is in Unix Time date format. Optional; defaults to the date of the first executed trade |\n\n### orderbook [rest]\n\n`orderbook(Function? callback)` => Promise / callback\n\n## WebSocket\n\n### constructor [websocket]\n\n`new BlinkTradeWS(Object constructor)`\n\n#### Arguments\n\n| Name     | Type    | Description                                                  |\n|----------|---------|--------------------------------------------------------------|\n| prod     | Boolean | Production environment, default to false                     |\n| brokerId | Number  | [see brokers list]()                                         |\n| url      | String  | Custom url in case if you're using a custom backend url |\n\n### connect [websocket]\n\nConnect to our WebSocket.\n\n`connect(Function? callback)` => Promise / callback\n\n### heartbeat [websocket]\n\nUsed as test request to check the latency connection.\n\n`heartbeat(Function? callback)` => Promise / callback\n\n### login [websocket]\n\n`login(Object login, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name         | Type   | Description      |\n|--------------|--------|------------------|\n| username     | String | Account username |\n| password     | String | Account password |\n| secondFactor | String | Optional secondFactor, if the authentication require second factor, you'll receive an error with `NeedSecondFactor = true` |\n\n### logout [websocket]\n\n`logout(Function? callback)` => Promise / callback\n\n### profile [websocket]\n\nAvailable only on `WebSocket`.\n\n`profile(Function? callback)` => Promise / callback\n\n\n### subscribeTicker [websocket]\n\n`subscribeTicker(Array<string> symbols, Function? callback)` => Promise / callback\n\n\nSymbols Available:\n\n| Name         | Description                  |\n|--------------|------------------------------|\n| BLINK:BTCUSD | BTC <-> Testnet (USD)        |\n| BLINK:BTCBRL | BTC <-> Brazil Reals (BRL)   |\n| BLINK:BTCVEF | BTC <-> Venezuelan Bolivares |\n| BLINK:BTCCLP | BTC <-> Chilean Pesos        |\n| BLINK:BTCVND | BTC <-> Vietnamise Dongs     |\n| UOL:USDBRT   | Dólar Turismo                |\n| UOL:USDBRL   | Dólar Comercial              |\n\n\n### subscribeOrderbook [websocket]\n\n`subscribeOrderbook(Array<string> symbol, Function? callback)` => Promise / callback\n\n#### Events\n\n| Event                 |  Description                                                                 |\n|-----------------------|------------------------------------------------------------------------------|\n| OB:NEW_ORDER          | Callback when receives a new order                                           |\n| OB:UPDATE_ORDER       | Callback when an order has been updated                                      |\n| OB:DELETE_ORDER       | Callback when an order has been deleted                                      |\n| OB:DELETE_ORDERS_THRU | Callback when one or more orders has been executed and deleted from the book |\n\n### executionReport [websocket]\n\n`executionReport(Function? callback)` => Promise / callback\n\n#### Events\n\nAn event emitter to get execution reports.\n\n| Event                      |  Description                                         |\n|----------------------------|------------------------------------------------------|\n| EXECUTION_REPORT:NEW       | Callback when you send a new order                   |\n| EXECUTION_REPORT:PARTIAL   | Callback when your order has been partially executed |\n| EXECUTION_REPORT:EXECUTION | Callback when an order has been successfully executed |\n| EXECUTION_REPORT:CANCELED  | Callback when your order has been canceled          |\n| EXECUTION_REPORT:REJECTED  | Callback when order has been rejected          |\n\n\n### tradeHistory [websocket]\n\n`tradeHistory(Object pagination, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name     | Type   | Description                                     |\n|----------|--------|-------------------------------------------------|\n| page     | Number | Current page to fetch, defaults to 0            |\n| pageSize | Number | Number of trades, limits to 80 |\n\n\n## Trade REST / Websocket\n\nThese methods bellow are both availabe under REST and WebSocket API.\n\n### balance [websocket, rest]\n\n`balance(Function? callback)` => Promise / callback\n\n#### Events\n\n`balance().on(\"BALANCE\", Function callback)` => Promise\n\n### sendOrder [websocket, rest]\n\n`sendOrder(Object order, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name     | Type   | Description                                    |\n|----------|--------|------------------------------------------------|\n| side     | String | \"1\" = Buy, \"2\" = Sell                          |\n| price    | Number | Price in \"satoshis\". e.g.: 1800 * 1e8          |\n| amount   | Number | Amount to be sent in satoshis. e.g.: 0.5 * 1e8 |\n| symbol   | String | Currency pair symbol, [check symbols table]()  |\n\n\n### cancelOrder [websocket, rest]\n\n`cancelOrder(Object order | Number orderId, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name     | Type   | Description                                                 |\n|----------|--------|-------------------------------------------------------------|\n| orderId  | Number | **Required** Order ID to be canceled                        |\n| clientId | Number | You need to pass the clientId (`ClOrdID`) to get a response |\n\n\n### myOrders [websocket, rest]\n\n`myOrders(Object pagination, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name     | Type   | Description                                     |\n|----------|--------|-------------------------------------------------|\n| page     | Number | Current page to fetch, defaults to 0            |\n| pageSize | Number | Number of orders, limits to 40 |\n\n### requestLedger [websocket, rest]\n\n`requestLedger(Object params, Function? callback)` => Promise / callback\n\n#### Arguments\n\n| Name     | Type   | Description/Value\n|----------|--------|------------------\n| page     | number | **Optional**; defaults to 0\n| pageSize | number | **Optional**; defaults to 20\n| brokerID | number | **Optional**; [\\<BROKER_ID\\>](#brokers)\n| currency | string | **Optional**; Currency code. (.e.g: BTC)\n\n\n### requestWithdrawList [websocket, rest]\n\n`requestWithdrawList(Object pagination, Array<string> statusList, Function? callback)` => Promise / callback\n\n| Name       | Type   | Description                                        |\n|------------|--------|----------------------------------------------------|\n| page       | Number | Current page to fetch, defaults to 0               |\n| pageSize   | Number | Number of withdraws, limits to 20                  |\n| statusList | Array  | 1-Pending, 2-In Progress, 4-Completed, 8-Cancelled |\n\n### requestWithdraw [websocket, rest]\n\n`requestWithdraw(Object params, Function? callback)` => Promise / callback\n\n| Name     | Type   | Description                                                            |\n|----------|--------|------------------------------------------------------------------------|\n| data     | Object | Withdraw required fields                                               |\n| amount   | Number | Amount of the withdraw                                                 |\n| method   | Array  | Method name of withdraw, check with your broker, defaults to `bitcoin` |\n| currency | String | Currency pair symbol to withdraw, defaults to `BTC`                    |\n\n#### Events\n\n| Event            | Description                    |\n|------------------|--------------------------------|\n| WITHDRAW_REFRESH | Callback when withdraw refresh |\n\n**FOXBIT**\n\n| Methods               | Required Data fields                                                      |\n|-----------------------|---------------------------------------------------------------------------|\n| bradesco              | AccountBranch, AccountNumber, AccountType, CPF_CNPJ                       |\n| bb                    | AccountBranch, AccountNumber, AccountType, CPF_CNPJ                       |\n| Caixa                 | AccountBranch, AccountNumber, AccountType, CPF_CNPJ                       |\n| ted                   | BankName, BankNumber, AccountBranch, AccountNumber, AccountType, CPF_CNPJ |\n\n**VBTC**\n\n| Methods                | Required Data fields                                                                                             |\n|------------------------|------------------------------------------------------------------------------------------------------------------|\n| banktransfer           | BankName, AccountBranch, BankCity, AccountName, AccountNumber, BankSwift                                         |\n| VPBankinternaltransfer | VPbankbranch, BankCity, AccountName, AccountNumber, BankSwift                                                    |\n| cashtoID               | BankName, BankBranch, BankCity, Clientname, ClientIDNr, Issue Date ID, Place of Issue, Phone Number of Recipient |\n\n### confirmWithdraw [websocket, rest]\n\n`confirmWithdraw(Object params, Function? callback)` => Promise / callback\n\n| Name              | Type   | Description                                                       |\n|-------------------|--------|-------------------------------------------------------------------|\n| withdrawId        | String | Withdraw ID to confirm                                            |\n| confirmationToken | String | **Optional** Confirmation Token sent by email                     |\n| secondFactor      | String | **Optional** Second Factor Authentication code generated by authy |\n\n### cancelWithdraw [websocket, rest]\n\n`cancelWithdraw(Number withdrawId, Function? callback)` => Promise / callback\n\n### onWithdrawRefresh [websocket]\n\n`onWithdrawRefresh(Function callback)` => Promise\n\n### requestDepositList [websocket, rest]\n\n`requestDepositList(Object params, Function? callback)` => Promise / callback\n\n| Name       | Type   | Description                                        |\n|------------|--------|----------------------------------------------------|\n| page       | Number | Current page to fetch, defaults to 0               |\n| pageSize   | Number | Number of deposits, limits to 20                   |\n| statusList | Array  | 1-Pending, 2-In Progress, 4-Completed, 8-Cancelled |\n\n### requestDeposit [websocket, rest]\n\n`requestDeposit(Object params, Function? callback)` => Promise / callback\n\n| Name            | Type   | Description                                             |\n|-----------------|--------|---------------------------------------------------------|\n| value           | Number | Value amount to deposit                                 |\n| currency        | String | Currency pair symbol to withdraw, defaults to `BTC`     |\n| depositMethodId | Number | Method ID to deposit, check [`requestDepositMethods`]() |\n\n#### Events\n\n| Event           | Description                   |\n|-----------------|-------------------------------|\n| DEPOSIT_REFRESH | Callback when deposit refresh |\n\n### requestDepositMethods [websocket, rest]\n\n`requestDepositMethods(Function? callback)` => Promise / callback\n\n### onDepositRefresh [websocket]\n\n`onDepositRefresh(Function callback)` => Promise\n\n# LICENSE\n\n[LICENSE GPLv3](./LICENSE)\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "yarn run build:src && yarn run build:dev && yarn run build:prod",
    "build:browser": "webpack --config webpack.config.browser.js",
    "build:browser:min": "cross-env NODE_ENV=production webpack --config webpack.config.browser.js",
    "build:commonjs": "webpack",
    "build:commonjs:min": "cross-env NODE_ENV=production webpack",
    "build:dev": "yarn run build:commonjs && yarn run build:browser",
    "build:prod": "yarn run build:commonjs:min && yarn run build:browser:min",
    "build:src": "babel src --out-dir lib",
    "check": "yarn run lint && yarn run test ",
    "clean": "",
    "flow": "flow",
    "lint": "eslint src test",
    "prepublish": "yarn run build",
    "test": "NODE_ENV=test mocha --exit --compilers js:babel-register --recursive"
  },
  "version": "0.0.14"
}
