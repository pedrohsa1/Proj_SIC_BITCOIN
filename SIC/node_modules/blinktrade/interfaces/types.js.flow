declare interface BlinkTradeBase {
  url?: string,
  prod?: boolean,
  brokerId?: number,
}

declare interface BlinkTradeWS extends BlinkTradeBase {
  fingerPrint?: string,
}

declare interface BlinkTradeRest extends BlinkTradeBase {
  key: string,
  secret: string,
  currency?: 'USD' | 'BRL' | 'VEF' | 'CLP' | 'VND' | 'PKR',
}

declare type BlinkTradeEnv = 'rest' | 'ws';

declare type Request = {
  resolve: Function,
  reject: Function,
};

declare type Listener = {
  [key: string]: Function,
};

declare type Stun = {
  local: ?Array<string>,
  public: ?Array<string>,
};

declare class PromiseEmitter<T> extends Promise<T> mixins EventEmitter {
  static resolve<T>(object: Promise<T> | T): Promise<T>,
  static reject<T>(error?: any): Promise<T>,
}

declare class EventEmitter<T> {
  on: (event: string, listener: Function) => Promise<T>,
  onAny: (listener: Function) => Promise<T>,
  offAny: (listener: Function) => Promise<T>,
  once: (event: string, listener: Function) => Promise<T>,
  many: (event: string, times: number, listener: Function) => Promise<T>,
  removeListener: (event: string, listener: Function) => Promise<T>,
  removeAllListeners: (events: Array<string>) => Promise<T>,
}
