'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeify = require('nodeify');

var _nodeify2 = _interopRequireDefault(_nodeify);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _requests = require('./constants/requests');

var _requests2 = _interopRequireDefault(_requests);

var _requestTypes = require('./constants/requestTypes');

var RequestTypes = _interopRequireWildcard(_requestTypes);

var _listener = require('./listener');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * BlinkTradeJS SDK
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (c) 2016-present BlinkTrade, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of BlinkTradeJS
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var BaseTransport = function (_Base) {
  _inherits(BaseTransport, _Base);

  function BaseTransport(params, env) {
    _classCallCheck(this, BaseTransport);

    var _this = _possibleConstructorReturn(this, (BaseTransport.__proto__ || Object.getPrototypeOf(BaseTransport)).call(this, params, env));

    _this.send = env === 'ws' ? _this.sendMessageAsPromise : _this.fetchTrade;
    return _this;
  }

  _createClass(BaseTransport, [{
    key: 'balance',
    value: function balance(callback) {
      var _this2 = this;

      var msg = {
        MsgType: _requests2.default.BALANCE,
        BalanceReqID: (0, _listener.generateRequestId)()
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this2.send(msg).then(function (data) {
          var Available = {};
          var balances = data[_this2.brokerId];
          if (balances) {
            Object.keys(balances).map(function (currency) {
              if (!currency.includes('locked')) {
                Available[currency] = balances[currency] - balances[currency + '_locked'];
              }
              return Available;
            });
          }

          return resolve(_extends({}, data, { Available: Available }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'myOrders',
    value: function myOrders() {
      var _this3 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$page = _ref.page,
          Page = _ref$page === undefined ? 0 : _ref$page,
          _ref$pageSize = _ref.pageSize,
          PageSize = _ref$pageSize === undefined ? 40 : _ref$pageSize;

      var callback = arguments[1];

      var msg = {
        MsgType: _requests2.default.ORDER_LIST,
        OrdersReqID: (0, _listener.generateRequestId)(),
        Page: Page,
        PageSize: PageSize
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this3.send(msg).then(function (data) {
          var Columns = data.Columns,
              orders = _objectWithoutProperties(data, ['Columns']);

          var OrdListGrp = _lodash2.default.map(data.OrdListGrp, function (order) {
            return _lodash2.default.zipObject(Columns, order);
          });
          return resolve(_extends({}, orders, {
            OrdListGrp: OrdListGrp
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'sendOrder',
    value: function sendOrder(_ref2, callback) {
      var _this4 = this;

      var side = _ref2.side,
          amount = _ref2.amount,
          price = _ref2.price,
          symbol = _ref2.symbol;

      var msg = {
        MsgType: _requests2.default.ORDER_SEND,
        ClOrdID: (0, _listener.generateRequestId)(),
        Symbol: symbol,
        Side: side,
        OrdType: '2',
        Price: price,
        OrderQty: amount,
        BrokerID: this.brokerId
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this4.send(msg).then(function (data) {
          (0, _listener.deleteRequest)(RequestTypes.CLIENT_ORDER_ID);
          resolve(data);
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'cancelOrder',
    value: function cancelOrder() {
      var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments[1];

      var orderId = param.orderId ? param.orderId : param;
      var msg = {
        MsgType: _requests2.default.ORDER_CANCEL
      };

      if (param.clientId) {
        msg.ClOrdID = param.clientId;
      }

      if (param.orderId) {
        msg.OrderID = orderId;
      }

      return _nodeify2.default.extend(this.send(msg)).nodeify(callback);
    }

    /**
     * statusList: 1-Pending, 2-In Progress, 4-Completed, 8-Cancelled
     */

  }, {
    key: 'requestWithdrawList',
    value: function requestWithdrawList() {
      var _this5 = this;

      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$page = _ref3.page,
          Page = _ref3$page === undefined ? 0 : _ref3$page,
          _ref3$pageSize = _ref3.pageSize,
          PageSize = _ref3$pageSize === undefined ? 20 : _ref3$pageSize,
          _ref3$statusList = _ref3.statusList,
          StatusList = _ref3$statusList === undefined ? ['1', '2', '4', '8'] : _ref3$statusList;

      var callback = arguments[1];

      var msg = {
        MsgType: _requests2.default.REQUEST_WITHDRAW_LIST,
        WithdrawListReqID: (0, _listener.generateRequestId)(),
        Page: Page,
        PageSize: PageSize,
        StatusList: StatusList
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this5.send(msg).then(function (data) {
          var Columns = data.Columns,
              withdrawData = _objectWithoutProperties(data, ['Columns']);

          var WithdrawListGrp = _lodash2.default.map(data.WithdrawListGrp, function (withdraw) {
            return _lodash2.default.zipObject(Columns, withdraw);
          });
          return resolve(_extends({}, withdrawData, {
            WithdrawListGrp: WithdrawListGrp
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'requestWithdraw',
    value: function requestWithdraw(_ref4, callback) {
      var amount = _ref4.amount,
          data = _ref4.data,
          _ref4$currency = _ref4.currency,
          currency = _ref4$currency === undefined ? 'BTC' : _ref4$currency,
          _ref4$method = _ref4.method,
          method = _ref4$method === undefined ? 'bitcoin' : _ref4$method;

      var reqId = (0, _listener.generateRequestId)();
      var msg = {
        MsgType: _requests2.default.REQUEST_WITHDRAW,
        WithdrawReqID: reqId,
        ClOrdID: reqId,
        Method: method,
        Amount: amount,
        Currency: currency,
        Data: data
      };

      return _nodeify2.default.extend(this.send(msg)).nodeify(callback);
    }
  }, {
    key: 'confirmWithdraw',
    value: function confirmWithdraw(_ref5, callback) {
      var _this6 = this;

      var WithdrawID = _ref5.withdrawId,
          confirmationToken = _ref5.confirmationToken,
          secondFactor = _ref5.secondFactor;

      var msg = {
        MsgType: _requests2.default.CONFIRM_WITHDRAW,
        WithdrawReqID: (0, _listener.generateRequestId)(),
        WithdrawID: WithdrawID
      };

      if (confirmationToken) {
        msg.ConfirmationToken = confirmationToken;
      }

      if (secondFactor) {
        msg.SecondFactor = secondFactor;
      }

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this6.send(msg).then(function (data) {
          return resolve(_extends({}, data));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'cancelWithdraw',
    value: function cancelWithdraw(withdrawId, callback) {
      var _this7 = this;

      var reqId = (0, _listener.generateRequestId)();
      var msg = {
        MsgType: _requests2.default.CANCEL_WITHDRAW,
        WithdrawCancelReqID: reqId,
        ClOrdID: reqId,
        WithdrawID: withdrawId
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this7.send(msg).then(function (data) {
          return resolve(_extends({}, data));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'requestDepositList',
    value: function requestDepositList() {
      var _this8 = this;

      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$page = _ref6.page,
          Page = _ref6$page === undefined ? 0 : _ref6$page,
          _ref6$pageSize = _ref6.pageSize,
          PageSize = _ref6$pageSize === undefined ? 20 : _ref6$pageSize,
          _ref6$status = _ref6.status,
          StatusList = _ref6$status === undefined ? ['1', '2', '4', '8'] : _ref6$status;

      var callback = arguments[1];

      var msg = {
        MsgType: _requests2.default.REQUEST_DEPOSIT_LIST,
        DepositListReqID: (0, _listener.generateRequestId)(),
        Page: Page,
        PageSize: PageSize,
        StatusList: StatusList
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this8.send(msg).then(function (data) {
          var Columns = data.Columns,
              depositData = _objectWithoutProperties(data, ['Columns']);

          var DepositListGrp = _lodash2.default.map(data.DepositListGrp, function (deposit) {
            return _lodash2.default.zipObject(Columns, deposit);
          });
          return resolve(_extends({}, depositData, {
            DepositListGrp: DepositListGrp
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'requestDeposit',
    value: function requestDeposit() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$currency = _ref7.currency,
          currency = _ref7$currency === undefined ? 'BTC' : _ref7$currency,
          value = _ref7.value,
          depositMethodId = _ref7.depositMethodId;

      var callback = arguments[1];

      var reqId = (0, _listener.generateRequestId)();
      var msg = {
        MsgType: _requests2.default.REQUEST_DEPOSIT,
        DepositReqID: reqId,
        ClOrdID: reqId,
        Currency: currency,
        BrokerID: this.brokerId
      };

      if (currency !== 'BTC') {
        msg.DepositMethodID = depositMethodId;
        msg.Value = value;
      }

      return _nodeify2.default.extend(this.send(msg)).nodeify(callback);
    }
  }, {
    key: 'requestDepositMethods',
    value: function requestDepositMethods(callback) {
      var msg = {
        MsgType: _requests2.default.REQUEST_DEPOSIT_METHODS,
        DepositMethodReqID: (0, _listener.generateRequestId)()
      };

      return _nodeify2.default.extend(this.send(msg)).nodeify(callback);
    }
  }, {
    key: 'requestLedger',
    value: function requestLedger() {
      var _this9 = this;

      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref8$page = _ref8.page,
          Page = _ref8$page === undefined ? 0 : _ref8$page,
          _ref8$pageSize = _ref8.pageSize,
          PageSize = _ref8$pageSize === undefined ? 20 : _ref8$pageSize,
          currency = _ref8.currency,
          filter = _ref8.filter;

      var callback = arguments[1];

      var msg = {
        MsgType: _requests2.default.REQUEST_LEDGER,
        LedgerListReqID: (0, _listener.generateRequestId)(),
        Page: Page,
        PageSize: PageSize
      };

      if (currency) {
        msg.Currency = currency;
      }
      if (filter) {
        msg.Filter = filter;
      }

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _this9.send(msg).then(function (data) {
          var Columns = data.Columns,
              ledgerData = _objectWithoutProperties(data, ['Columns']);

          var LedgerListGrp = _lodash2.default.map(data.LedgerListGrp, function (ledger) {
            return _lodash2.default.zipObject(Columns, ledger);
          });
          resolve(_extends({}, ledgerData, {
            LedgerListGrp: LedgerListGrp
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }]);

  return BaseTransport;
}(_base2.default);

exports.default = BaseTransport;