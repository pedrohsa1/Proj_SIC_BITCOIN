'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeify = require('nodeify');

var _nodeify2 = _interopRequireDefault(_nodeify);

var _eventemitter = require('eventemitter2');

var _listener = require('./listener');

var _actionTypes = require('./constants/actionTypes');

var _requests = require('./constants/requests');

var _requests2 = _interopRequireDefault(_requests);

var _wsTransport = require('./wsTransport');

var _wsTransport2 = _interopRequireDefault(_wsTransport);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * BlinkTradeJS SDK
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (c) 2016-present BlinkTrade, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of BlinkTradeJS
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var BlinkTradeWS = function (_WebSocketTransport) {
  _inherits(BlinkTradeWS, _WebSocketTransport);

  function BlinkTradeWS(params) {
    _classCallCheck(this, BlinkTradeWS);

    var _this = _possibleConstructorReturn(this, (BlinkTradeWS.__proto__ || Object.getPrototypeOf(BlinkTradeWS)).call(this, params));

    _this.session = {};
    return _this;
  }
  /**
   * Session to store login information
   */


  _createClass(BlinkTradeWS, [{
    key: 'heartbeat',
    value: function heartbeat(callback) {
      var _this2 = this;

      var d = new Date();
      var msg = {
        MsgType: _requests2.default.HEARTBEAT,
        TestReqID: d.getTime(),
        SendTime: d.getTime()
      };

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', _this2).call(_this2, msg).then(function (data) {
          return resolve(_extends({}, data, {
            Latency: new Date(Date.now()) - data.SendTime
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'login',
    value: function login(_ref, callback) {
      var _this3 = this;

      var username = _ref.username,
          password = _ref.password,
          secondFactor = _ref.secondFactor,
          brokerId = _ref.brokerId;

      var userAgent = void 0;
      if (!this.isNode) {
        userAgent = {
          UserAgent: window.navigator.userAgent,
          UserAgentLanguage: window.navigator.language,
          UserAgentPlatform: window.navigator.platform,
          UserAgentTimezoneOffset: new Date().getTimezoneOffset()
        };
      } else {
        var os = require('os');
        userAgent = {
          UserAgent: os.type() + ' ' + os.release(),
          UserAgentLanguage: 'en_US',
          UserAgentPlatform: os.platform() + ' (' + os.arch() + ')',
          UserAgentTimezoneOffset: new Date().getTimezoneOffset()
        };
      }

      var msg = _extends({
        MsgType: _requests2.default.LOGIN,
        UserReqID: (0, _listener.generateRequestId)(),
        BrokerID: brokerId || this.brokerId,
        Username: username,
        Password: password,
        UserReqTyp: '1'
      }, userAgent);

      if (secondFactor) {
        msg.SecondFactor = secondFactor;
      }

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', _this3).call(_this3, msg).then(function (data) {
          if (data.UserStatus === 1) {
            _this3.session = data;
            return resolve(data);
          }

          return reject(data);
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'logout',
    value: function logout(callback) {
      var msg = {
        MsgType: _requests2.default.LOGOUT,
        BrokerID: this.brokerId,
        UserReqID: (0, _listener.generateRequestId)(),
        Username: this.session.Username,
        UserReqTyp: '2'
      };

      return _nodeify2.default.extend(_get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', this).call(this, msg)).nodeify(callback);
    }
  }, {
    key: 'profile',
    value: function profile(callback) {
      var _session$Profile = this.session.Profile,
          VerificationData = _session$Profile.VerificationData,
          profile = _objectWithoutProperties(_session$Profile, ['VerificationData']);

      return _nodeify2.default.extend(Promise.resolve(profile)).nodeify(callback);
    }
  }, {
    key: 'balance',
    value: function balance(callback) {
      var _this4 = this;

      return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'emitterPromise', this).call(this, new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'balance', _this4).call(_this4, callback).then(function (data) {
          (0, _listener.registerListener)('U3', function (balance) {
            callback && callback(null, balance);
            return _this4.eventEmitter.emit(_actionTypes.BALANCE, balance);
          });
          return resolve(data);
        }).catch(reject);
      }));
    }
  }, {
    key: 'subscribeTicker',
    value: function subscribeTicker(symbols, callback) {
      var _this5 = this;

      var msg = {
        MsgType: _requests2.default.SECURITY_STATUS,
        SecurityStatusReqID: (0, _listener.generateRequestId)(),
        SubscriptionRequestType: '1',
        Instruments: symbols
      };

      var formatTicker = function formatTicker(data) {
        return _extends({}, data, {
          SellVolume: data.SellVolume / 1e8,
          LowPx: data.LowPx / 1e8,
          LastPx: data.LastPx / 1e8,
          BestAsk: data.BestAsk / 1e8,
          HighPx: data.HighPx / 1e8,
          BuyVolume: data.BuyVolume / 1e8,
          BestBid: data.BestBid / 1e8
        });
      };

      return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'emitterPromise', this).call(this, new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', _this5).call(_this5, msg).then(function (data) {
          resolve(formatTicker(data));
          (0, _listener.registerEventEmitter)({ SecurityStatusReqID: data.SecurityStatusReqID }, function (ticker) {
            callback && callback(null, formatTicker(ticker));
            return _this5.eventEmitter.emit('BLINK:' + ticker.Symbol, formatTicker(ticker));
          });
        }).catch(reject);
      }), callback);
    }
  }, {
    key: 'unSubscribeTicker',
    value: function unSubscribeTicker(SecurityStatusReqID) {
      var msg = {
        MsgType: _requests2.default.SECURITY_STATUS,
        SecurityStatusReqID: SecurityStatusReqID,
        SubscriptionRequestType: '2'
      };

      _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessage', this).call(this, msg);
      return SecurityStatusReqID;
    }
  }, {
    key: 'subscribeOrderbook',
    value: function subscribeOrderbook(symbols, callback) {
      var _this6 = this;

      var msg = {
        MsgType: _requests2.default.MARKET_DATA_FULL_REFRESH,
        MDReqID: (0, _listener.generateRequestId)(),
        SubscriptionRequestType: '1',
        MarketDepth: 0,
        MDUpdateType: '1', // Incremental refresh
        MDEntryTypes: ['0', '1', '2'],
        Instruments: symbols
      };

      var subscribeEvent = function subscribeEvent(data) {
        if (data.MDBkTyp === '3') {
          data.MDIncGrp.map(function (order) {
            var dataOrder = {
              index: order.MDEntryPositionNo,
              price: order.MDEntryPx / 1e8,
              size: order.MDEntrySize / 1e8,
              side: order.MDEntryType === '0' ? 'buy' : 'sell',
              userId: order.UserID,
              orderId: order.OrderID,
              symbol: order.Symbol,
              time: new Date(order.MDEntryDate + ' ' + order.MDEntryTime).toString()
            };

            switch (order.MDEntryType) {
              case '0':
              case '1':
                var orderbookEvent = _actionTypes.ORDER_BOOK + ':' + _actionTypes.EVENTS.ORDERBOOK[order.MDUpdateAction];
                var bidOfferData = _extends({}, dataOrder, { type: orderbookEvent });

                callback && callback(null, bidOfferData);
                return _this6.eventEmitter.emit(orderbookEvent, bidOfferData);
              case '2':
                var tradeEvent = _actionTypes.ORDER_BOOK + ':' + _actionTypes.EVENTS.TRADES[order.MDUpdateAction];
                var tradeData = _extends({}, dataOrder, { type: tradeEvent });

                callback && callback(null, tradeData);
                return _this6.eventEmitter.emit(tradeEvent, tradeData);
              case '4':
                break;
              default:
                return null;
            }
            return null;
          });
        }
      };

      return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'emitterPromise', this).call(this, new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', _this6).call(_this6, msg).then(function (data) {
          if (data.MsgType === 'W') {
            // Split orders in bids and asks
            /* eslint-disable no-param-reassign */
            var _data$MDFullGrp$filte = data.MDFullGrp.filter(function (order) {
              return order.MDEntryType === '0' || order.MDEntryType === '1';
            }).reduce(function (prev, order) {
              var side = order.MDEntryType === '0' ? 'bids' : 'asks';
              (prev[side] || (prev[side] = [])).push([order.MDEntryPx / 1e8, order.MDEntrySize / 1e8, order.UserID]);
              return prev;
            }, []),
                bids = _data$MDFullGrp$filte.bids,
                asks = _data$MDFullGrp$filte.asks;
            /* eslint-enable no-param-reassign */

            (0, _listener.registerEventEmitter)({ MDReqID: data.MDReqID }, subscribeEvent);

            return resolve(_extends({}, data, {
              MDFullGrp: _defineProperty({}, data.Symbol, {
                bids: bids,
                asks: asks
              })
            }));
          }
        }).catch(function (err) {
          return reject(err);
        });
      }), callback);
    }
  }, {
    key: 'unSubscribeOrderbook',
    value: function unSubscribeOrderbook(MDReqID) {
      var msg = {
        MsgType: _requests2.default.MARKET_DATA_UNSUBSCRIBE,
        MDReqID: MDReqID,
        MarketDepth: 0,
        SubscriptionRequestType: '2'
      };

      _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessage', this).call(this, msg);
      return MDReqID;
    }
  }, {
    key: 'executionReport',
    value: function executionReport(callback) {
      var _this7 = this;

      (0, _listener.registerListener)('8', function (data) {
        callback && callback(data);
        var event = _actionTypes.EVENTS.EXECUTION_REPORT[data.ExecType];
        return _this7.eventEmitter.emit(_actionTypes.EXECUTION_REPORT + ':' + event, data);
      });

      return this.eventEmitter;
    }
  }, {
    key: 'tradeHistory',
    value: function tradeHistory() {
      var _this8 = this;

      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          since = _ref2.since,
          filter = _ref2.filter,
          _ref2$page = _ref2.page,
          Page = _ref2$page === undefined ? 0 : _ref2$page,
          _ref2$pageSize = _ref2.pageSize,
          PageSize = _ref2$pageSize === undefined ? 80 : _ref2$pageSize;

      var callback = arguments[1];

      var msg = {
        MsgType: _requests2.default.TRADE_HISTORY,
        TradeHistoryReqID: (0, _listener.generateRequestId)(),
        Page: Page,
        PageSize: PageSize
      };

      if (filter && filter.length > 0) {
        msg.Filter = filter;
      }

      if (since && typeof since === 'number') {
        msg.Since = since;
      }

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'sendMessageAsPromise', _this8).call(_this8, msg).then(function (data) {
          var Columns = data.Columns,
              trades = _objectWithoutProperties(data, ['Columns']);

          var TradeHistory = _lodash2.default.groupBy(_lodash2.default.map(data.TradeHistoryGrp, function (trade) {
            return _lodash2.default.zipObject(Columns, trade);
          }), function (trade) {
            return trade.Market;
          });
          return resolve(_extends({}, trades, {
            TradeHistoryGrp: TradeHistory
          }));
        }).catch(reject);
      })).nodeify(callback);
    }
  }, {
    key: 'requestDeposit',
    value: function requestDeposit() {
      var _this9 = this;

      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$currency = _ref3.currency,
          currency = _ref3$currency === undefined ? 'BTC' : _ref3$currency,
          value = _ref3.value,
          depositMethodId = _ref3.depositMethodId;

      var callback = arguments[1];

      var subscribeEvent = function subscribeEvent(deposit) {
        callback && callback(null, deposit);
        return _this9.eventEmitter.emit(_actionTypes.DEPOSIT_REFRESH, deposit);
      };

      return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'emitterPromise', this).call(this, new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'requestDeposit', _this9).call(_this9, { currency: currency, value: value, depositMethodId: depositMethodId }).then(function (deposit) {
          (0, _listener.registerEventEmitter)({ ClOrdID: deposit.ClOrdID }, subscribeEvent);
          return resolve(deposit);
        }).catch(reject);
      }), callback);
    }
  }, {
    key: 'onDepositRefresh',
    value: function onDepositRefresh(callback) {
      return new Promise(function (resolve) {
        (0, _listener.registerListener)('U23', function (deposit) {
          callback && callback(deposit);
          return resolve(deposit);
        });
      });
    }
  }, {
    key: 'requestWithdraw',
    value: function requestWithdraw(_ref4, callback) {
      var _this10 = this;

      var amount = _ref4.amount,
          data = _ref4.data,
          _ref4$currency = _ref4.currency,
          currency = _ref4$currency === undefined ? 'BTC' : _ref4$currency,
          _ref4$method = _ref4.method,
          method = _ref4$method === undefined ? 'bitcoin' : _ref4$method;

      var subscribeEvent = function subscribeEvent(withdraw) {
        callback && callback(null, withdraw);
        return _this10.eventEmitter.emit(_actionTypes.WITHDRAW_REFRESH, withdraw);
      };

      return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'emitterPromise', this).call(this, new Promise(function (resolve, reject) {
        return _get(BlinkTradeWS.prototype.__proto__ || Object.getPrototypeOf(BlinkTradeWS.prototype), 'requestWithdraw', _this10).call(_this10, { amount: amount, data: data, currency: currency, method: method }).then(function (withdraw) {
          (0, _listener.registerEventEmitter)({ ClOrdID: withdraw.ClOrdID }, subscribeEvent);
          return resolve(withdraw);
        }).catch(reject);
      }), callback);
    }
  }, {
    key: 'onWithdrawRefresh',
    value: function onWithdrawRefresh(callback) {
      return new Promise(function (resolve) {
        (0, _listener.registerListener)('U9', function (withdraw) {
          callback && callback(withdraw);
          return resolve(withdraw);
        });
      });
    }
  }]);

  return BlinkTradeWS;
}(_wsTransport2.default);

exports.default = BlinkTradeWS;