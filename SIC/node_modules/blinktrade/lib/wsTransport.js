'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeify = require('nodeify');

var _nodeify2 = _interopRequireDefault(_nodeify);

var _fingerprintjs = require('fingerprintjs2');

var _fingerprintjs2 = _interopRequireDefault(_fingerprintjs);

var _eventemitter = require('eventemitter2');

var _baseTransport = require('./baseTransport');

var _baseTransport2 = _interopRequireDefault(_baseTransport);

var _listener = require('./listener');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * BlinkTradeJS SDK
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (c) 2016-present BlinkTrade, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of BlinkTradeJS
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var WebSocketTransport = function (_BaseTransport) {
  _inherits(WebSocketTransport, _BaseTransport);

  /*
   * Transport Promise
   */


  /*
   * FingerPrint
   */
  function WebSocketTransport() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WebSocketTransport);

    var _this = _possibleConstructorReturn(this, (WebSocketTransport.__proto__ || Object.getPrototypeOf(WebSocketTransport)).call(this, params, 'ws'));

    _this.stun = { local: null, public: [] };

    _this.getStun();
    _this.getFingerPrint(params.fingerPrint);

    _this.eventEmitter = new _eventemitter.EventEmitter2({ wildcard: true, delimiter: ':' });
    return _this;
  }

  /*
   * Event emitter to dispatch websocket updates
   */


  /*
   * Stun object
   */

  /*
   * WebSocket Instance
   */


  _createClass(WebSocketTransport, [{
    key: 'connect',
    value: function connect(callback) {
      var _this2 = this;

      return _nodeify2.default.extend(new Promise(function (resolve, reject) {
        _this2.request = { resolve: resolve, reject: reject };

        var WebSocket = _this2.isNode ? require('ws') : window.WebSocket;

        _this2.socket = new WebSocket(_this2.endpoint);
        _this2.socket.onopen = _this2.onOpen.bind(_this2);
        _this2.socket.onclose = _this2.onClose.bind(_this2);
        _this2.socket.onerror = _this2.onError.bind(_this2);
        _this2.socket.onmessage = _this2.onMessage.bind(_this2);
      })).nodeify(callback);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      this.socket.close();
    }
  }, {
    key: 'onOpen',
    value: function onOpen() {
      this.request.resolve({ connected: true });
    }
  }, {
    key: 'onClose',
    value: function onClose() {}
  }, {
    key: 'onError',
    value: function onError(error) {
      this.request.reject(error);
    }

    /* eslint-disable no-unused-vars */

  }, {
    key: 'sendMessage',
    value: function sendMessage(msg, promise) {
      if (this.socket.readyState === 1) {
        var data = msg;

        data.STUNTIP = this.stun;
        data.FingerPrint = this.fingerPrint;

        this.socket.send(JSON.stringify(data));
      }
    }
    /* eslint-enable no-unused-vars */

  }, {
    key: 'sendMessageAsPromise',
    value: function sendMessageAsPromise(msg) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var promise = { resolve: resolve, reject: reject };
        (0, _listener.registerRequest)(msg, promise);
        // We are passing the promise as a parameter to spy it in our tests
        _this3.sendMessage(msg, promise);
      });
    }
  }, {
    key: 'onMessage',
    value: function onMessage(msg) {
      var data = JSON.parse(msg.data);
      if (data.MsgType === 'ERROR') {
        throw new Error('Error: ' + data.Detail + ' ' + data.Description);
      }

      var request = (0, _listener.getRequest)(data);
      var listener = (0, _listener.getListener)(data.MsgType);
      this.dispatchPromise(request, data);
      this.dispatchListeners(listener, data);
    }

    /* eslint-disable indent */

  }, {
    key: 'dispatchPromise',
    value: function dispatchPromise(request, data) {
      if (request) {
        return request.resolve ? request.resolve(data) : request.callback ? request.callback(data) : null;
      }
    }
    /* eslint-enable indent */

  }, {
    key: 'dispatchListeners',
    value: function dispatchListeners(listener, data) {
      return listener && listener(data);
    }
  }, {
    key: 'getFingerPrint',
    value: function getFingerPrint(customFingerprint) {
      var _this4 = this;

      if (this.isNode) {
        return require('./util/macaddress').getMac(function (macAddress) {
          _this4.fingerPrint = macAddress;
        });
      } else if (this.isBrowser) {
        return new _fingerprintjs2.default().get(function (fingerPrint) {
          _this4.fingerPrint = Math.abs(require('./util/hash32').encodeByteArray(fingerPrint)).toString();
        });
      } else if (customFingerprint) {
        this.fingerPrint = customFingerprint;
      } else {
        throw new Error('FingerPrint not provided');
      }
    }
  }, {
    key: 'getStun',
    value: function getStun() {
      var _this5 = this;

      if (this.isNode) {
        require('./util/stun').getStun(function (data) {
          _this5.stun = data;
        });
      }
    }

    /* eslint-disable no-param-reassign */

  }, {
    key: 'emitterPromise',
    value: function emitterPromise(promise, callback) {
      var _this6 = this;

      promise.on = function (event, listener) {
        _this6.eventEmitter.on(event, listener);
        return promise;
      };
      promise.onAny = function (listener) {
        _this6.eventEmitter.onAny(listener);
        return promise;
      };
      promise.offAny = function (listener) {
        _this6.eventEmitter.offAny(listener);
        return promise;
      };
      promise.once = function (event, listener) {
        _this6.eventEmitter.once(event, listener);
        return promise;
      };
      promise.many = function (event, times, listener) {
        _this6.eventEmitter.many(event, times, listener);
        return promise;
      };
      promise.removeListener = function (event, listener) {
        _this6.eventEmitter.removeListener(event, listener);
        return promise;
      };
      promise.removeAllListeners = function (events) {
        _this6.eventEmitter.removeAllListeners(events);
        return promise;
      };

      return _nodeify2.default.extend(promise).nodeify(callback);
    }
    /* eslint-enable no-param-reassign */

  }]);

  return WebSocketTransport;
}(_baseTransport2.default);

exports.default = WebSocketTransport;